RULE set up ea bbb
CLASS EscapeAnalysisBasicBlockBuilder
METHOD <init>
AT EXIT
IF $2.getCurrentElement().toString().startsWith("example.single")
DO
  link("threadName", Thread.currentThread().getName());
  traceln("(" + Thread.currentThread().getName() + ") construct EscapeAnalysisBBB for " + $2.getCurrentElement().toString())
ENDRULE

RULE ea bbb new
CLASS DelegatingBasicBlockBuilder
METHOD new_
AT EXIT
BIND
  isEA = org.qbicc.plugin.opt.EscapeAnalysisBasicBlockBuilder.class.isInstance($this);
  threadName = linked("threadName");
IF
  isEA
  AND
  Thread.currentThread().getName().equals(threadName)
DO
  traceln("(" + Thread.currentThread().getName() + ") exit new_(" + $1.toString() + ") with " + $!);
ENDRULE

RULE ea bbb constructor
CLASS EscapeAnalysisBasicBlockBuilder
METHOD invokeConstructor
AT EXIT
BIND
  threadName = linked("threadName")
IF Thread.currentThread().getName().equals(threadName)
DO traceln("(" + Thread.currentThread().getName() + ") invoke constructor on " + $2.toString() + " returns " + $!)
ENDRULE

RULE ea bbb store
CLASS EscapeAnalysisBasicBlockBuilder
METHOD store
AT ENTRY
BIND
  threadName = linked("threadName")
IF Thread.currentThread().getName().equals(threadName)
DO traceln("(" + Thread.currentThread().getName() + ") store " + $2.toString() + " into " + $1.toString())
ENDRULE

RULE ea bbb instance field of entry
CLASS EscapeAnalysisBasicBlockBuilder
METHOD instanceFieldOf
AT ENTRY
BIND
  threadName = linked("threadName")
IF Thread.currentThread().getName().equals(threadName)
DO traceln("(" + Thread.currentThread().getName() + ") instanceFieldOf ENTRY for handle " + $1.toString() + " -> " + $1.getValueDependency(0))
ENDRULE

RULE ea bbb instance field of exit
CLASS EscapeAnalysisBasicBlockBuilder
METHOD instanceFieldOf
AT EXIT
BIND
  threadName = linked("threadName")
IF Thread.currentThread().getName().equals(threadName)
DO traceln("(" + Thread.currentThread().getName() + ") instanceFieldOf EXIT for handle " + $1.toString() + " -> " + $1.getValueDependency(0) + " returns " + $!)
ENDRULE

RULE ea bbb load
CLASS DelegatingBasicBlockBuilder
METHOD load
AT EXIT
BIND
  isEA = org.qbicc.plugin.opt.EscapeAnalysisBasicBlockBuilder.class.isInstance($this);
  threadName = linked("threadName");
IF
  isEA
  AND
  Thread.currentThread().getName().equals(threadName)
DO
  traceln("(" + Thread.currentThread().getName() + ") exit load(" + $1.toString() + ") with " + $!);
ENDRULE

RULE cg field edges
CLASS EscapeAnalysis$ConnectionGraph
METHOD addFieldEdge
AT ENTRY
BIND
  threadName = linked("threadName")
IF Thread.currentThread().getName().equals(threadName)
DO traceln("(" + Thread.currentThread().getName() + ") add field edge from " + $1.toString() + " to " + $2.toString())
ENDRULE

RULE cg global escape
CLASS EscapeAnalysis$ConnectionGraph
METHOD setGlobalEscape
AT ENTRY
BIND
  threadName = linked("threadName")
IF Thread.currentThread().getName().equals(threadName)
DO traceln("(" + Thread.currentThread().getName() + ") set " + $1.toString() + " to GLOBAL_ESCAPE")
ENDRULE

RULE cg no escape
CLASS EscapeAnalysis$ConnectionGraph
METHOD setNoEscape
AT ENTRY
BIND
  threadName = linked("threadName")
IF Thread.currentThread().getName().equals(threadName)
DO traceln("(" + Thread.currentThread().getName() + ") set " + $1.toString() + " to NO_ESCAPE")
ENDRULE

#RULE cg fix points-to
#CLASS EscapeAnalysis$ConnectionGraph
#METHOD fixPointsToNewIfNeeded
#AT RETURN
#BIND
#  threadName = linked("threadName");
#  success = $!;
#IF
#  Thread.currentThread().getName().equals(threadName)
#  AND
#  success
#DO traceln("(" + Thread.currentThread().getName() + ") fixed points-to edge from " + $1.toString() + " to " + $2.toString())
#ENDRULE
