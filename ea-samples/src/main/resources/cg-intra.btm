RULE begin cg
CLASS EscapeAnalysisBasicBlockBuilder
METHOD <init>
AT EXIT
BIND
  th = Thread.currentThread();
  cg = $this.connectionGraph;
  element = $2.getCurrentElement();
  elementName = element.toString().replaceAll("[\\s\\$\\.\\[(/;)]", "_");
IF
  elementName.contains("_samples")
  OR
  elementName.contains("_main")
DO
  link(th, "cg", cg);
  traceOpen(cg, String.format("target/connection-graphs/intra-procedure/%s.dot", new Object[]{elementName}));
  trace(cg, "digraph " + elementName + " {\n");
  trace(cg, "rankdir=LR\n");
  trace(cg, "node [colorscheme=pastel23]\n");
ENDRULE

RULE cg field edge if absent
CLASS EscapeAnalysis$ConnectionGraph
METHOD addFieldEdgeIfAbsent
AT EXIT
BIND
  th = Thread.currentThread();
  cg = linked(th, "cg");
  obj = $1.toString().replaceAll("[\\.@]", "_");
  field = $2.toString().replaceAll("[\\.@]", "_");
  success = $!;
IF
  $this == cg
  AND
  success
DO
  trace(cg, obj + " -> " + field + " [label = \"F\"]\n");
ENDRULE

RULE cg points-to edge if absent
CLASS EscapeAnalysis$ConnectionGraph
METHOD addPointsToEdgeIfAbsent
AT EXIT
BIND
  th = Thread.currentThread();
  cg = linked(th, "cg");
  ref = $1.toString().replaceAll("[\\.@]", "_");
  obj = $2.toString().replaceAll("[\\.@]", "_");
  success = $!;
IF
  $this == cg
  AND
  success
DO
  trace(cg, ref + " -> " + obj + " [label = \"P\"]\n");
ENDRULE

RULE cg deferred edge if absent
CLASS EscapeAnalysis$ConnectionGraph
METHOD addDeferredEdgeIfAbsent
AT EXIT
BIND
  th = Thread.currentThread();
  cg = linked(th, "cg");
  ref = $1.toString().replaceAll("[\\.@]", "_");
  obj = $2.toString().replaceAll("[\\.@]", "_");
  success = $!;
IF
  $this == cg
  AND
  success
DO
  trace(cg, ref + " -> " + obj + " [style=dashed label = \"D\"]\n");
ENDRULE

RULE close cg graph
CLASS EscapeAnalysis$ConnectionGraph
METHOD methodExit
AT EXIT
BIND
  th = Thread.currentThread();
  cg = linked(th, "cg");
IF
  $this == cg
DO
  trace(cg, "\"Global Escape\" [style=filled fillcolor = 2]\n");
  trace(cg, "\"Arg Escape\" [style=filled fillcolor = 3]\n");
  trace(cg, "\"No Escape\" [style=filled fillcolor = 1]\n");
  trace(cg, "\"Unknown\" [style=filled fillcolor = white]\n");
  trace(cg, "}\n");
ENDRULE

RULE cg set arg escape
CLASS EscapeAnalysis$ConnectionGraph
METHOD setEscape
AT ENTRY
BIND
  th = Thread.currentThread();
  cg = linked(th, "cg");
  node = $1.toString().replaceAll("[\\.@]", "_");
IF
  $this == cg
  AND
  $2 == EscapeAnalysis$EscapeState.ARG_ESCAPE
DO trace(cg, node + " [style=filled, fillcolor = 3]\n")
ENDRULE

RULE cg set global escape
CLASS EscapeAnalysis$ConnectionGraph
METHOD setEscape
AT ENTRY
BIND
  th = Thread.currentThread();
  cg = linked(th, "cg");
  node = $1.toString().replaceAll("[\\.@]", "_");
IF
  $this == cg
  AND
  $2 == EscapeAnalysis$EscapeState.GLOBAL_ESCAPE
DO trace(cg, node + " [style=filled, fillcolor = 2]\n")
ENDRULE

RULE cg set no escape
CLASS EscapeAnalysis$ConnectionGraph
METHOD setEscape
AT ENTRY
BIND
  th = Thread.currentThread();
  cg = linked(th, "cg");
  node = $1.toString().replaceAll("[\\.@]", "_");
IF
  $this == cg
  AND
  $2 == EscapeAnalysis$EscapeState.NO_ESCAPE
DO trace(cg, node + " [style=filled, fillcolor = 1]\n")
ENDRULE

RULE new toString
CLASS Object
METHOD toString
AT RETURN
BIND
  isNew = org.qbicc.graph.New.class.isInstance($this);
  aNew : org.qbicc.graph.New = (isNew ? $this : null);
IF
  isNew
DO $! = "New_" + aNew.type.toString().replaceAll("[\\()/\\$]", "_")
ENDRULE
