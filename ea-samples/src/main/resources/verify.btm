RULE set expectations
CLASS org.qbicc.main.Main
METHOD <init>
AT EXIT
IF TRUE
DO
  link("expected", "expected", java.util.Map.of(
    "org/example/ea/samples.EASample_01_Basic.sample(I)I"
    , "org/example/ea/samples/EASample_01_Basic$A@0"
    , "org/example/ea/samples.EASample_03_ParameterEscape.sample()I"
    , "org/example/ea/samples/EASample_03_ParameterEscape$A@0"
    , "org/example/ea/samples.EASample_03_ParameterEscape.sampleViaAux()I"
    , "org/example/ea/samples/EASample_03_ParameterEscape$A@0"
    , "org/example/ea/samples.EASample_08_CallTwice.sample1(I)I"
    , "org/example/ea/samples/EASample_08_CallTwice$A@0"
  ));
  link("actual", "actual", new java.util.concurrent.ConcurrentHashMap());
ENDRULE

RULE record stack allocations
CLASS EscapeAnalysisOptimizeVisitor
METHOD stackAllocate
AT ENTRY
BIND
  aNew : org.qbicc.graph.New = $1;
  actual : java.util.Map = linked("actual", "actual");
IF
  $1.getClassObjectType().toString().contains("ea/samples")
DO
  actual.put(
    $2.getCurrentElement().toString()
    , aNew.getClassObjectType().definition.getInternalName() + "@" + aNew.getBytecodeIndex()
  );
ENDRULE

RULE main call success
CLASS org.qbicc.main.Main
METHOD call
AT EXIT
BIND
  expected : java.util.Map = linked("expected", "expected");
  actual : java.util.Map = linked("actual", "actual");
IF
  java.util.Objects.equals(expected, actual)
DO
  traceln(String.format("%nTest allocations:%nSuccess%n", new Object[]{}));
ENDRULE

RULE main call failure
CLASS org.qbicc.main.Main
METHOD call
AT EXIT
BIND
  expected : java.util.Map = linked("expected", "expected");
  actual : java.util.Map = linked("actual", "actual");
IF
  !java.util.Objects.equals(expected, actual)
DO
  traceln(String.format(
    "%nTest allocations:%nFailure!%nExpected (%d):%n%s,%nbut got (%d):%n%s%n"
    , new Object[]{
      expected.size()
      , new java.util.TreeMap(expected)
      , actual.size()
      , new java.util.TreeMap(actual)
    }
  ));
ENDRULE
