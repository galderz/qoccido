RULE set expectations
CLASS org.qbicc.main.Main
METHOD <init>
AT EXIT
IF TRUE
DO
  link("expected", "expected", java.util.List.of(
    "org/example/ea/samples.EASample_01_Basic.sample1(I)I -> org/example/ea/samples/EASample_01_Basic$A@0"
    , "org/example/ea/samples.EASample_03_ParameterEscape.sample1()I -> org/example/ea/samples/EASample_03_ParameterEscape$A@0"
    , "org/example/ea/samples.EASample_08_CallTwice.sample1(I)I -> org/example/ea/samples/EASample_08_CallTwice$A@0"
    , "org/example/ea/samples.EASample_09_Interfaces$Monomorphic.isInfinite(II)Z -> org/example/ea/samples/EASample_09_Interfaces$Monomorphic$IsInfinite@10"
    , "org/example/ea/samples.EASample_09_Interfaces$Monomorphic.isZero(II)Z -> org/example/ea/samples/EASample_09_Interfaces$Monomorphic$IsZero@10"
    , "org/example/ea/samples.EASample_09_Interfaces$Polymorphic.identity(II)Lorg/example/ea/samples/EASample_09_Interfaces$Point; -> org/example/ea/samples/EASample_09_Interfaces$Polymorphic$Identity@10"
    , "org/example/ea/samples.EASample_09_Interfaces$Polymorphic.inverse(II)Lorg/example/ea/samples/EASample_09_Interfaces$Point; -> org/example/ea/samples/EASample_09_Interfaces$Polymorphic$Inverse@10"
  ));
  link("actual", "actual", new java.util.concurrent.CopyOnWriteArrayList());
ENDRULE

RULE record stack allocations
CLASS EscapeAnalysisOptimizeVisitor
METHOD stackAllocate
AT ENTRY
BIND
  aNew : org.qbicc.graph.New = $1;
  actual : java.util.List = linked("actual", "actual");
IF
  $1.getClassObjectType().toString().contains("ea/samples")
DO
  actual.add(String.format(
    "%s -> %s@%s"
    , new Object[]{
      $2.getCurrentElement().toString()
      , aNew.getClassObjectType().definition.getInternalName()
      , aNew.getBytecodeIndex()
    }
  ));
ENDRULE

RULE main call success
CLASS org.qbicc.main.Main
METHOD call
AT EXIT
BIND
  expectedList : java.util.List = linked("expected", "expected");
  actualList : java.util.List = linked("actual", "actual");
  expected : java.util.List = expectedList.stream().sorted().collect(java.util.stream.Collectors.toList());
  actual : java.util.List = actualList.stream().sorted().collect(java.util.stream.Collectors.toList());
IF
  java.util.Objects.equals(expected, actual)
DO
  traceln(String.format("%nTest allocations:%nSuccess%n", new Object[]{}));
ENDRULE

RULE main call failure
CLASS org.qbicc.main.Main
METHOD call
AT EXIT
BIND
  expectedList : java.util.List = linked("expected", "expected");
  actualList : java.util.List = linked("actual", "actual");
  expected : java.util.List = expectedList.stream().sorted().collect(java.util.stream.Collectors.toList());
  actual : java.util.List = actualList.stream().sorted().collect(java.util.stream.Collectors.toList());
IF
  !java.util.Objects.equals(expected, actual)
DO
  traceln(String.format(
    "%nTest allocations:%nFailure!%nExpected (%d):%n%s%n,but got (%d):%n%s%n"
    , new Object[]{
      expected.size()
      , String.join("\n", expected)
      , actual.size()
      , String.join("\n", actual)
    }
  ));
ENDRULE
