RULE set stack allocation expectations
CLASS org.qbicc.main.Main
METHOD <init>
AT EXIT
IF TRUE
DO
  link("expectedStackAllocations", "expectedStackAllocations", java.util.List.of(new Object[]{
    "org/example/ea/samples.EASample_01_Basic.sample1(I)I -> org/example/ea/samples/EASample_01_Basic$A@0"
    , "org/example/ea/samples.EASample_03_ParameterEscape.sample1()I -> org/example/ea/samples/EASample_03_ParameterEscape$A@0"
    , "org/example/ea/samples.EASample_07_Runnable.sample1()C -> org/example/ea/samples/EASample_07_Runnable$SampleRunnable@0"
    , "org/example/ea/samples.EASample_08_CallTwice.sample1(I)I -> org/example/ea/samples/EASample_08_CallTwice$A@0"
    , "org/example/ea/samples.EASample_09_Interfaces$Generic.identity(II)Lorg/example/ea/samples/EASample_09_Interfaces$Point; -> org/example/ea/samples/EASample_09_Interfaces$Generic$Identity@10"
    , "org/example/ea/samples.EASample_09_Interfaces$Generic.inverse(II)Lorg/example/ea/samples/EASample_09_Interfaces$Point; -> org/example/ea/samples/EASample_09_Interfaces$Generic$Inverse@10"
    , "org/example/ea/samples.EASample_09_Interfaces$NonGeneric.isInfinite(II)Z -> org/example/ea/samples/EASample_09_Interfaces$NonGeneric$IsInfinite@10"
    , "org/example/ea/samples.EASample_09_Interfaces$NonGeneric.isZero(II)Z -> org/example/ea/samples/EASample_09_Interfaces$NonGeneric$IsZero@10"
    , "org/example/ea/samples.EASample_10_Subclasses$Abstract.ageInMercury(I)I -> org/example/ea/samples/EASample_10_Subclasses$Abstract$Mercury@9"
    , "org/example/ea/samples.EASample_10_Subclasses$Abstract.ageInSaturn(I)I -> org/example/ea/samples/EASample_10_Subclasses$Abstract$Saturn@9"
    , "org/example/ea/samples.EASample_10_Subclasses$NonAbstract.weightInJupiter(D)D -> org/example/ea/samples/EASample_10_Subclasses$NonAbstract$Jupiter@9"
    , "org/example/ea/samples.EASample_10_Subclasses$NonAbstract.weightInMars(D)D -> org/example/ea/samples/EASample_10_Subclasses$NonAbstract$Mars@9"
    , "org/example/ea/samples.EASample_11_Loops$ForLoop.forEachList(I)I -> org/example/ea/samples/EASample_11_Loops$Data$Int$List@0"
    , "org/example/ea/samples.EASample_11_Loops$ForLoop.forEachList(I)I -> org/example/ea/samples/EASample_11_Loops$Data$Int@37"
    , "org/example/ea/samples.EASample_11_Loops$ObjectIdentity.increment(I)I -> org/example/ea/samples/EASample_11_Loops$Data$Int@0"
    , "org/example/ea/samples.EASample_11_Loops$RecursiveLoop.fibonacci(Lorg/example/ea/samples/EASample_11_Loops$Data$Int;)Lorg/example/ea/samples/EASample_11_Loops$Data$Int; -> org/example/ea/samples/EASample_11_Loops$Data$Int@10"
    , "org/example/ea/samples.EASample_11_Loops$RecursiveLoop.fibonacci(Lorg/example/ea/samples/EASample_11_Loops$Data$Int;)Lorg/example/ea/samples/EASample_11_Loops$Data$Int; -> org/example/ea/samples/EASample_11_Loops$Data$Int@29"
    , "org/example/ea/samples.EASample_11_Loops$RecursiveLoop.main()V -> org/example/ea/samples/EASample_11_Loops$Data$Int@0"
  }));
  link("actualStackAllocations", "actualStackAllocations", new java.util.concurrent.CopyOnWriteArrayList());
ENDRULE

RULE record stack allocations
CLASS EscapeAnalysisOptimizeVisitor
METHOD stackAllocate
AT ENTRY
BIND
  aNew : org.qbicc.graph.New = $1;
  actual : java.util.List = linked("actualStackAllocations", "actualStackAllocations");
IF
  $1.getClassObjectType().toString().contains("ea/samples")
DO
  actual.add(String.format(
    "%s -> %s@%s"
    , new Object[]{
      $2.getCurrentElement().toString()
      , aNew.getClassObjectType().definition.getInternalName()
      , aNew.getBytecodeIndex()
    }
  ));
ENDRULE

RULE main call success
CLASS org.qbicc.main.Main
METHOD call
AT EXIT
BIND
  expectedList : java.util.List = linked("expectedStackAllocations", "expectedStackAllocations");
  actualList : java.util.List = linked("actualStackAllocations", "actualStackAllocations");
  expected : java.util.List = expectedList.stream().sorted().collect(java.util.stream.Collectors.toList());
  actual : java.util.List = actualList.stream().sorted().collect(java.util.stream.Collectors.toList());
IF
  java.util.Objects.equals(expected, actual)
DO
  traceln(String.format("%nTest stack allocations:%nSuccess%n", new Object[]{}));
ENDRULE

RULE stack allocations failure
CLASS org.qbicc.main.Main
METHOD call
AT EXIT
BIND
  expectedList : java.util.List = linked("expectedStackAllocations", "expectedStackAllocations");
  actualList : java.util.List = linked("actualStackAllocations", "actualStackAllocations");
  expected : java.util.List = expectedList.stream().sorted().collect(java.util.stream.Collectors.toList());
  actual : java.util.List = actualList.stream().sorted().collect(java.util.stream.Collectors.toList());
IF
  !java.util.Objects.equals(expected, actual)
DO
  traceln(String.format(
    "%nTest stack allocations:%nFailure!%nExpected (%d):%n%s%n,but got (%d):%n%s%n"
    , new Object[]{
      expected.size()
      , String.join("\n", expected)
      , actual.size()
      , String.join("\n", actual)
    }
  ));
ENDRULE
