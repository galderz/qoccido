RULE new toString
CLASS org.qbicc.graph.New
METHOD toString(java.lang.StringBuilder)
AT RETURN
BIND
  aNew : org.qbicc.graph.New = $this;
  sb = $1;
IF TRUE
DO
  $! = sb.append("@").append(Integer.toHexString(System.identityHashCode($this)).toCharArray());
ENDRULE

RULE path for method
CLASS org.qbicc.driver.CompilationContextImpl
METHOD getOutputDirectory(MemberElement)
AT EXIT
BIND
  name = $1.toString();
  th = Thread.currentThread();
  prefix = "(" + th.getName() + ") ";
IF
#  name.toString().contains("org/example/ea/samples.EASample_01_Basic.sample1")
#  name.toString().contains("org/example/ea/samples.EASample_02_StaticAssignment.sample1")
#  name.toString().contains("org/example/ea/samples.EASample_03_ParameterEscape.sample1")
#  name.toString().contains("org/example/ea/samples.EASample_03_ParameterEscape.sample2")
#   name.toString().contains("04_ReturnEscape.wrapped")
#  name.toString().contains("org/example/ea/samples.EASample_07_Runnable.sample1")
#  name.toString().contains("org/example/ea/samples.EASample_09_Interfaces$NonGeneric.isInfinite")
   name.toString().contains("9_Interfaces$Generic.identityX")
#  name.toString().contains("org/example/ea/samples.EASample_11_Loops$ForLoop.forEachList")
#  name.toString().contains("org/example/ea/samples.EASample_11_Loops$RecursiveLoop.fibonacci")
DO
  link("name", name);
  traceln(prefix.toString() + "Method " + $1.toString() + " assigned output path: " + $!.toString());
ENDRULE

RULE set up ea bbb
CLASS EscapeAnalysisIntraMethodBuilder
METHOD <init>
AT EXIT
BIND
  name = linked("name");
  th = Thread.currentThread();
  prefix = "(" + th.getName() + ") ";
IF
  $2.getCurrentElement().toString().equals(name)
DO traceln(prefix.toString() + "EA: construct intra method analysis for " + name);
ENDRULE

RULE instance field of
CLASS EscapeAnalysisIntraMethodBuilder
METHOD instanceFieldOf
AT ENTRY
BIND
  name = linked("name");
  th = Thread.currentThread();
  prefix = "(" + th.getName() + ") ";
IF
  $this.connectionGraph.name.equals(name)
DO traceln(prefix.toString() + "EA: in.toString()stanceFieldOf " + $1.toString())
ENDRULE

RULE handle reference
CLASS EscapeAnalysisIntraMethodBuilder
METHOD handleInstanceFieldOf
AT ENTRY
BIND
  name = linked("name");
  th = Thread.currentThread();
  prefix = "(" + th.getName() + ") ";
IF
  $this.connectionGraph.name.equals(name)
DO traceln(prefix.toString() + "EA: handleInstanceFieldOf " + $1.toString() + " with target " + $3.toString())
ENDRULE

RULE store
CLASS EscapeAnalysisIntraMethodBuilder
METHOD store
AT ENTRY
BIND
  name = linked("name");
  th = Thread.currentThread();
  prefix = "(" + th.getName() + ") ";
IF
  $this.connectionGraph.name.equals(name)
DO traceln(prefix.toString() + "EA: store " + $2.toString() + " into " + $1.toString())
ENDRULE

RULE call method
CLASS EscapeAnalysisIntraMethodBuilder
METHOD call
AT EXIT
BIND
  name = linked("name");
  th = Thread.currentThread();
  prefix = "(" + th.getName() + ") ";
IF
  $this.connectionGraph.name.equals(name)
DO traceln(prefix.toString() + "EA: call " + $1.toString() + " with " + $2.toString() + " returns " + $!)
ENDRULE

RULE start method
CLASS EscapeAnalysisIntraMethodBuilder
METHOD startMethod
AT ENTRY
BIND
  th = Thread.currentThread();
  name = linked("name");
  prefix = "(" + th.getName() + ") ";
IF
  $this.connectionGraph.name.equals(name)
DO traceln(prefix.toString() + "EA: start method " + $this.getCurrentElement().toString() + " with " + $1.toString())
ENDRULE

RULE return_
CLASS EscapeAnalysisIntraMethodBuilder
METHOD return_
AT ENTRY
BIND
  name = linked("name");
  th = Thread.currentThread();
  prefix = "(" + th.getName() + ") ";
IF
  $this.connectionGraph.name.equals(name)
DO traceln(prefix.toString() + "EA: return_ " + $1.toString() + " from " + $this.getCurrentElement().toString())
ENDRULE

RULE throw_
CLASS EscapeAnalysisIntraMethodBuilder
METHOD throw_
AT ENTRY
BIND
  name = linked("name");
  th = Thread.currentThread();
  prefix = "(" + th.getName() + ") ";
IF
  $this.connectionGraph.name.equals(name)
DO traceln(prefix.toString() + "EA: throw_ " + $1.toString() + " from " + $this.getCurrentElement().toString())
ENDRULE

RULE finish
CLASS EscapeAnalysisIntraMethodBuilder
METHOD finish
AT ENTRY
BIND
  name = linked("name");
  th = Thread.currentThread();
  prefix = "(" + th.getName() + ") ";
IF
  $this.connectionGraph.name.equals(name)
DO traceln(prefix.toString() + "EA: finish " + $this.getCurrentElement().toString())
ENDRULE

RULE set supported
CLASS EscapeAnalysisIntraMethodBuilder$SupportContext
METHOD setSupported
AT ENTRY
BIND
  name = linked("name");
  th = Thread.currentThread();
  prefix = "(" + th.getName() + ") ";
IF
  $this.name.equals(name)
DO traceln(prefix.toString() + "EA: set support " + $2 + " for " + $1.toString())
ENDRULE

RULE switch to unsupported
CLASS EscapeAnalysisIntraMethodBuilder$SupportContext
METHOD switchToUnsupported
AT EXIT
BIND
  name = linked("name");
  th = Thread.currentThread();
  prefix = "(" + th.getName() + ") ";
  updated = $!;
IF
  $this.name.equals(name)
  AND
  updated
DO traceln(prefix.toString() + "EA: switched to unsupported " + $1.toString())
ENDRULE

RULE add unsupported
CLASS EscapeAnalysisIntraMethodBuilder$SupportContext
METHOD addUnsupported
AT EXIT
BIND
  name = linked("name");
  th = Thread.currentThread();
  prefix = "(" + th.getName() + ") ";
  updated = $!;
IF
  $this.name.equals(name)
  AND
  updated
DO traceln(prefix.toString() + "EA: add unsupported " + $1.toString())
ENDRULE

#RULE verify lattice
#CLASS EscapeAnalysisIntraMethodBuilder$EscapeLattice
#METHOD verify()
#AT ENTRY
#BIND
#  name = linked("name");
#  th = Thread.currentThread();
#  prefix = "(" + th.getName() + ") ";
#IF
#  $this.connectionGraph.name.equals(name)
#DO traceln(prefix.toString() + "EA: verify lattice")
#ENDRULE

#RULE verify node entry
#CLASS EscapeAnalysisIntraMethodBuilder$EscapeLattice
#METHOD verify(Node)
#AT ENTRY
#BIND
#  name = linked("name");
#  th = Thread.currentThread();
#  prefix = "(" + th.getName() + ") ";
#IF
#  $this.connectionGraph.name.equals(name)
#DO traceln(prefix.toString() + "EA: verify node " + $1.toString())
#ENDRULE

#RULE verify node exit
#CLASS EscapeAnalysisIntraMethodBuilder$EscapeLattice
#METHOD verify(Node)
#AT EXIT
#BIND
#  name = linked("name");
#  th = Thread.currentThread();
#  prefix = "(" + th.getName() + ") ";
#IF
#  $this.connectionGraph.name.equals(name)
#DO traceln(prefix.toString() + "EA: verify node " + $!.toString() + " for "+ $1.toString())
#ENDRULE

#RULE verify dependency
#CLASS EscapeAnalysisIntraMethodBuilder$EscapeLattice
#METHOD verifyDependency
#AT ENTRY
#BIND
#  name = linked("name");
#  th = Thread.currentThread();
#  prefix = "(" + th.getName() + ") ";
#IF
#  $this.connectionGraph.name.equals(name)
#DO traceln(prefix.toString() + "EA: verify dependency " + $1.toString())
#ENDRULE

RULE set arg escape
CLASS ConnectionGraph
METHOD setEscapeValue
AT ENTRY
BIND
  name = linked("name");
  th = Thread.currentThread();
  prefix = "(" + th.getName() + ") ";
IF
  $this.name.equals(name)
DO traceln(prefix.toString() + "EA: set escape value for " + $1.toString() + " in " + $this.name + " to " + $2.toString())
ENDRULE

RULE call graph calls
CLASS EscapeAnalysisState
METHOD trackCall
AT ENTRY
BIND
  executable : org.qbicc.graph.Executable = $2.getValueHandle();
  name = linked("name");
  th = Thread.currentThread();
  prefix = "(" + th.getName() + ") ";
IF
  $1.toString().equals(name)
DO traceln(prefix.toString() + "EA: track call " + $1.toString() + " to " + executable.getExecutable().toString())
ENDRULE

RULE update connection graph
CLASS EscapeAnalysisInterMethodAnalysis$ConnectionGraphUpdater
METHOD updateConnectionGraph
AT ENTRY
BIND
  element = $1;
  name = linked("name");
  th = Thread.currentThread();
  prefix = "(" + th.getName() + ") ";
IF
  element.toString().equals(name)
DO
  traceln(prefix.toString() + "EA: update connection graph for " + $1.toString())
ENDRULE

RULE find interface connection graph
CLASS EscapeAnalysisInterMethodAnalysis$ConnectionGraphUpdater
METHOD findInterfaceConnectionGraph
AT ENTRY
BIND
  name = linked("name");
  th = Thread.currentThread();
  prefix = "(" + th.getName() + ") ";
IF
  $1.toString().equals(name)
DO traceln(prefix.toString() + "EA: find interface connection graph for " + $1.toString())
ENDRULE

RULE find reachable methods in type
CLASS EscapeAnalysisInterMethodAnalysis$ConnectionGraphUpdater
METHOD findReachableMethods
AT ENTRY
BIND
  name = linked("name");
  th = Thread.currentThread();
  prefix = "(" + th.getName() + ") ";
IF
  $1.toString().equals(name)
DO traceln(prefix.toString() + "EA: find reachable methods in type " + $2.getInternalName())
ENDRULE

RULE find interface implementors
CLASS EscapeAnalysisInterMethodAnalysis$ConnectionGraphUpdater
METHOD findInterfaceImplementors
AT EXIT
BIND
  name = linked("name");
  th = Thread.currentThread();
  prefix = "(" + th.getName() + ") ";
IF
  $1.toString().equals(name)
DO traceln(prefix.toString() + "EA: implementors of interface method " + $1.toString() + " are: " + $!.toString())
ENDRULE

#RULE find abstract connection graph
#CLASS EscapeAnalysisInterMethodAnalysis$ConnectionGraphUpdater
#METHOD findAbstractConnectionGraph
#AT ENTRY
#IF TRUE
#DO traceln("(" + Thread.currentThread().getName() + ") EA: find abstract connection graph for " + $1.toString())
#ENDRULE

RULE update at method entry
CLASS ConnectionGraph
METHOD updateAtMethodEntry
AT ENTRY
BIND
  name = linked("name");
  th = Thread.currentThread();
  prefix = "(" + th.getName() + ") ";
IF
  $this.name.equals(name)
DO traceln(prefix.toString() + "EA: update at method entry " + $this.toString())
ENDRULE

RULE update after invoking method
CLASS ConnectionGraph
METHOD updateAfterInvokingMethod
AT ENTRY
BIND
  name = linked("name");
  th = Thread.currentThread();
  prefix = "(" + th.getName() + ") ";
IF
  $this.name.equals(name)
DO traceln(prefix.toString() + "EA: update " + $this.toString() + " after invoking " + $2.name)
ENDRULE

RULE update at method exit
CLASS ConnectionGraph
METHOD updateAtMethodExit
AT ENTRY
BIND
  name = linked("name");
  th = Thread.currentThread();
  prefix = "(" + th.getName() + ") ";
IF
  $this.name.equals(name)
DO traceln(prefix.toString() + "EA: update at method exit " + $this.toString())
ENDRULE

RULE merge escape values
CLASS ConnectionGraph
METHOD mergeEscapeValues
AT EXIT
BIND
  name = linked("name");
  th = Thread.currentThread();
  prefix = "(" + th.getName() + ") ";
IF
  $this.name.equals(name)
DO traceln(prefix.toString() + "EA: merge escape values of " + $this.escapeValues.toString() + " with " + $1.escapeValues.toString() + " returns " + $!.toString())
ENDRULE

RULE stack allocate
CLASS EscapeAnalysisOptimizeVisitor
METHOD stackAllocate
AT ENTRY
BIND
  name = linked("name");
  th = Thread.currentThread();
  prefix = "(" + th.getName() + ") ";
IF
  $2.getCurrentElement().toString().equals(name)
DO traceln(prefix.toString() + "EA: stack allocate " + $1.toString() + " on " + $2.getCurrentElement() + " (it does not escape)")
ENDRULE

RULE register node
CLASS ConnectionGraphDotVisitor
METHOD register
AT EXIT
BIND
  name = linked("name");
  th = Thread.currentThread();
  prefix = "(" + th.getName() + ") ";
IF
  $this.connectionGraph.name.equals(name)
DO traceln(prefix.toString() + "(" + $this.connectionGraph.name + ") register node " + $1.toString() + " returns " + $!.toString())
ENDRULE

RULE show new node cg
CLASS ConnectionGraphDotVisitor
METHOD show
AT RETURN
IF TRUE
DO
  $! = $1.getType().getUpperBound().toString() + "@" + Integer.toHexString(System.identityHashCode($1));
ENDRULE
