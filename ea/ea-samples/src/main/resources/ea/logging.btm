RULE new toString
CLASS org.qbicc.graph.New
METHOD toString(java.lang.StringBuilder)
AT RETURN
BIND
  aNew : org.qbicc.graph.New = $this;
  sb = $1;
IF TRUE
DO
  $! = sb.append("@").append(Integer.toHexString(System.identityHashCode($this)).toCharArray());
ENDRULE

RULE path for method
CLASS org.qbicc.driver.CompilationContextImpl
METHOD getOutputDirectory(MemberElement)
AT EXIT
BIND
  name = $1.toString();
  th = Thread.currentThread();
  prefix = "(" + th.getName() + ") ";
IF
#  name.toString().contains("01_Basic.sample1")
#  name.toString().contains("02_StaticAssignment.sample1")
#  name.toString().contains("03_ParameterEscape.sample1")
#  name.toString().contains("03_ParameterEscape.sample2")
#  name.toString().contains("04_ReturnEscape.wrapped")
#  name.toString().contains("07_Runnable.sample1")
#  name.toString().contains("09_Interfaces$NonGeneric.isInfinite")
#  name.toString().contains("09_Interfaces$Generic.identityX")
#  name.toString().contains("11_Loops$ForLoop.forEachList")
  name.toString().contains("11_Loops$ForLoop.listOf")
#  name.toString().contains("11_Loops$RecursiveLoop.fibonacci")
#  name.toString().contains("11_Loops$RecursiveLoop.main")
DO
  link("name", name);
  traceln(prefix.toString() + "Method " + $1.toString() + " assigned output path: " + $!.toString());
ENDRULE

RULE store
CLASS EscapeAnalysisIntraMethodAnalysis$AnalysisVisitor
METHOD visit(EscapeAnalysisIntraMethodAnalysis$AnalysisContext, Store)
AT ENTRY
BIND
  name = linked("name");
  th = Thread.currentThread();
  prefix = "(" + th.getName() + ") ";
IF
  $1.connectionGraph.name.equals(name)
DO traceln(prefix.toString() + "EA: store " + $2.getValue().toString() + " into " + $2.getValueHandle().toString())
ENDRULE

RULE call method
CLASS EscapeAnalysisIntraMethodAnalysis$AnalysisVisitor
METHOD visit(EscapeAnalysisIntraMethodAnalysis$AnalysisContext, Call)
AT EXIT
BIND
  name = linked("name");
  th = Thread.currentThread();
  prefix = "(" + th.getName() + ") ";
IF
  $1.connectionGraph.name.equals(name)
DO traceln(prefix.toString() + "EA: call " + $2.getValueHandle().toString() + " with " + $2.getArguments().toString() + " returns " + $!)
ENDRULE

RULE return_
CLASS EscapeAnalysisIntraMethodAnalysis$AnalysisVisitor
METHOD visit(EscapeAnalysisIntraMethodAnalysis$AnalysisContext, ValueReturn)
AT ENTRY
BIND
  name = linked("name");
  th = Thread.currentThread();
  prefix = "(" + th.getName() + ") ";
IF
  $1.connectionGraph.name.equals(name)
DO traceln(prefix.toString() + "EA: return " + $2.getReturnValue().toString() + " from " + $this.element.toString())
ENDRULE

RULE throw_
CLASS EscapeAnalysisIntraMethodAnalysis$AnalysisVisitor
METHOD visit(EscapeAnalysisIntraMethodAnalysis$AnalysisContext, Throw)
AT ENTRY
BIND
  name = linked("name");
  th = Thread.currentThread();
  prefix = "(" + th.getName() + ") ";
IF
  $1.connectionGraph.name.equals(name)
DO traceln(prefix.toString() + "EA: throw_ " + $2.getThrownValue().toString() + " from " + $this.element.toString())
ENDRULE

RULE set supported
CLASS EscapeAnalysisIntraMethodAnalysis$AnalysisContext
METHOD setSupported
AT ENTRY
BIND
  name = linked("name");
  th = Thread.currentThread();
  prefix = "(" + th.getName() + ") ";
IF
  $this.connectionGraph.name.equals(name)
DO traceln(prefix.toString() + "EA: set support " + $2 + " for " + $1.toString())
ENDRULE

RULE switch to unsupported
CLASS EscapeAnalysisIntraMethodAnalysis$AnalysisContext
METHOD switchToUnsupported
AT EXIT
BIND
  name = linked("name");
  th = Thread.currentThread();
  prefix = "(" + th.getName() + ") ";
  updated = $!;
IF
  $this.connectionGraph.name.equals(name)
  AND
  updated
DO traceln(prefix.toString() + "EA: switched to unsupported " + $1.toString())
ENDRULE

RULE add unsupported
CLASS EscapeAnalysisIntraMethodAnalysis$AnalysisContext
METHOD addUnsupported
AT EXIT
BIND
  name = linked("name");
  th = Thread.currentThread();
  prefix = "(" + th.getName() + ") ";
  updated = $!;
IF
  $this.connectionGraph.name.equals(name)
  AND
  updated
DO traceln(prefix.toString() + "EA: add unsupported " + $1.toString())
ENDRULE

RULE set escape value
CLASS ConnectionGraph
METHOD setEscapeValue
AT RETURN
BIND
  name = linked("name");
  th = Thread.currentThread();
  prefix = "(" + th.getName() + ") ";
IF
  $this.name.equals(name)
  AND
  $!
DO traceln(prefix.toString() + "EA: set escape value for " + $1.toString() + " in " + $this.name + " to " + $2.toString())
ENDRULE

RULE call graph calls
CLASS EscapeAnalysisState
METHOD addCall
AT ENTRY
BIND
  executable : org.qbicc.graph.Executable = $2.getValueHandle();
  name = linked("name");
  th = Thread.currentThread();
  prefix = "(" + th.getName() + ") ";
IF
  $1.toString().equals(name)
DO traceln(prefix.toString() + "EA: track call " + $1.toString() + " to " + executable.getExecutable().toString())
ENDRULE

RULE update connection graph
CLASS EscapeAnalysisInterMethodAnalysis$ConnectionGraphUpdater
METHOD updateConnectionGraph
AT ENTRY
BIND
  element = $1;
  name = linked("name");
  th = Thread.currentThread();
  prefix = "(" + th.getName() + ") ";
IF
  element.toString().equals(name)
DO
  traceln(prefix.toString() + "EA: update connection graph for " + $1.toString())
ENDRULE

RULE find interface connection graph
CLASS EscapeAnalysisInterMethodAnalysis$ConnectionGraphUpdater
METHOD findInterfaceConnectionGraph
AT ENTRY
BIND
  name = linked("name");
  th = Thread.currentThread();
  prefix = "(" + th.getName() + ") ";
IF
  $1.toString().equals(name)
DO traceln(prefix.toString() + "EA: find interface connection graph for " + $1.toString())
ENDRULE

RULE find reachable methods in type
CLASS EscapeAnalysisInterMethodAnalysis$ConnectionGraphUpdater
METHOD findReachableMethods
AT ENTRY
BIND
  name = linked("name");
  th = Thread.currentThread();
  prefix = "(" + th.getName() + ") ";
IF
  $1.toString().equals(name)
DO traceln(prefix.toString() + "EA: find reachable methods in type " + $2.getInternalName())
ENDRULE

RULE find interface implementors
CLASS EscapeAnalysisInterMethodAnalysis$ConnectionGraphUpdater
METHOD findInterfaceImplementors
AT EXIT
BIND
  name = linked("name");
  th = Thread.currentThread();
  prefix = "(" + th.getName() + ") ";
IF
  $1.toString().equals(name)
DO traceln(prefix.toString() + "EA: implementors of interface method " + $1.toString() + " are: " + $!.toString())
ENDRULE

#RULE find abstract connection graph
#CLASS EscapeAnalysisInterMethodAnalysis$ConnectionGraphUpdater
#METHOD findAbstractConnectionGraph
#AT ENTRY
#IF TRUE
#DO traceln("(" + Thread.currentThread().getName() + ") EA: find abstract connection graph for " + $1.toString())
#ENDRULE

RULE entry update after invoking method
CLASS ConnectionGraph
METHOD updateAfterInvokingMethod
AT ENTRY
BIND
  name = linked("name");
  th = Thread.currentThread();
  prefix = "(" + th.getName() + ") ";
IF
  $this.name.equals(name)
DO traceln(prefix.toString() + "EA: enter after invoke of method " + $2.name + ", whose escape values are: " + $2.escapeValues)
ENDRULE

RULE exit update after invoking method
CLASS ConnectionGraph
METHOD updateAfterInvokingMethod
AT EXIT
BIND
  name = linked("name");
  th = Thread.currentThread();
  prefix = "(" + th.getName() + ") ";
IF
  $this.name.equals(name)
DO traceln(prefix.toString() + "EA: exit after invoke of method " + $2.name + ", updated escape values are: " + $this.escapeValues)
ENDRULE

RULE update at method exit
CLASS ConnectionGraph
METHOD updateAtMethodExit
AT ENTRY
BIND
  name = linked("name");
  th = Thread.currentThread();
  prefix = "(" + th.getName() + ") ";
IF
  $this.name.equals(name)
DO traceln(prefix.toString() + "EA: update at method exit " + $this.toString())
ENDRULE

RULE merge escape values
CLASS ConnectionGraph
METHOD mergeEscapeValues
AT EXIT
BIND
  name = linked("name");
  th = Thread.currentThread();
  prefix = "(" + th.getName() + ") ";
IF
  $this.name.equals(name)
DO traceln(prefix.toString() + "EA: merge escape values of " + $this.escapeValues.toString() + " with " + $1.escapeValues.toString() + " returns " + $!.toString())
ENDRULE

RULE stack allocate
CLASS EscapeAnalysisOptimizeVisitor
METHOD stackAllocate
AT ENTRY
BIND
  name = linked("name");
  th = Thread.currentThread();
  prefix = "(" + th.getName() + ") ";
IF
  $2.getCurrentElement().toString().equals(name)
DO traceln(prefix.toString() + "EA: stack allocate " + $1.toString() + " on " + $2.getCurrentElement() + " (it does not escape)")
ENDRULE
