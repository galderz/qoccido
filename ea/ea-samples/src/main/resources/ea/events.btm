RULE init entry
CLASS EscapeAnalysisIntraMethodBuilder
METHOD <init>
HELPER org.example.ea.helpers.EscapeAnalysisPoet
AT ENTRY
BIND
  name = $2.getCurrentElement().toString();
IF
  name.toString().contains("org/example/ea/samples.EASample_01_Basic.sample1")
DO
  link("name", name);
  create(name, $2);
ENDRULE

RULE new
CLASS EscapeAnalysisIntraMethodBuilder
METHOD new_
HELPER org.example.ea.helpers.EscapeAnalysisPoet
AT ENTRY
BIND
  name = linked("name");
IF
  $this.connectionGraph.name.equals(name)
DO
  callNew($1, $2, $3, $4);
ENDRULE

RULE instanceFieldOf
CLASS EscapeAnalysisIntraMethodBuilder
METHOD instanceFieldOf
HELPER org.example.ea.helpers.EscapeAnalysisPoet
AT ENTRY
BIND
  name = linked("name");
IF
  $this.connectionGraph.name.equals(name)
DO
  callInstanceFieldOf($1, $2);
ENDRULE

RULE store
CLASS EscapeAnalysisIntraMethodBuilder
METHOD store
HELPER org.example.ea.helpers.EscapeAnalysisPoet
AT ENTRY
BIND
  name = linked("name");
IF
  $this.connectionGraph.name.equals(name)
DO
  callStore($1, $2, $3);
ENDRULE

RULE call
CLASS EscapeAnalysisIntraMethodBuilder
METHOD call
HELPER org.example.ea.helpers.EscapeAnalysisPoet
AT ENTRY
BIND
  name = linked("name");
IF
  $this.connectionGraph.name.equals(name)
DO
  callCall($1, $2);
ENDRULE

RULE start method
CLASS EscapeAnalysisIntraMethodBuilder
METHOD startMethod
HELPER org.example.ea.helpers.EscapeAnalysisPoet
AT ENTRY
BIND
  name = linked("name");
IF
  $this.connectionGraph.name.equals(name)
DO
  callStartMethod($1);
ENDRULE

RULE return
CLASS EscapeAnalysisIntraMethodBuilder
METHOD return_
HELPER org.example.ea.helpers.EscapeAnalysisPoet
AT ENTRY
BIND
  name = linked("name");
IF
  $this.connectionGraph.name.equals(name)
DO
  callReturn($1);
ENDRULE

RULE throw
CLASS EscapeAnalysisIntraMethodBuilder
METHOD throw_
HELPER org.example.ea.helpers.EscapeAnalysisPoet
AT ENTRY
BIND
  name = linked("name");
IF
  $this.connectionGraph.name.equals(name)
DO
  callThrow($1);
ENDRULE

RULE checkcast
CLASS EscapeAnalysisIntraMethodBuilder
METHOD checkcast
HELPER org.example.ea.helpers.EscapeAnalysisPoet
AT ENTRY
BIND
  name = linked("name");
IF
  $this.connectionGraph.name.equals(name)
DO
  callCheckcast($1, $2, $3, $4, $5);
ENDRULE

RULE finish
CLASS EscapeAnalysisIntraMethodBuilder
METHOD finish
HELPER org.example.ea.helpers.EscapeAnalysisPoet
AT ENTRY
BIND
  name = linked("name");
IF
  $this.connectionGraph.name.equals(name)
DO
  callFinish()
ENDRULE

RULE reference
CLASS org.qbicc.graph.DelegatingBasicBlockBuilder
METHOD referenceHandle
HELPER org.example.ea.helpers.EscapeAnalysisPoet
AT ENTRY
BIND
  name = linked("name");
  isIntra = org.qbicc.plugin.opt.ea.EscapeAnalysisIntraMethodBuilder.class.isInstance($this);
  aIntra : org.qbicc.plugin.opt.ea.EscapeAnalysisIntraMethodBuilder = (isIntra ? $this : null);
IF
  isIntra
  AND
  aIntra.connectionGraph.name.equals(name)
DO
  callReferenceHandle($1)
ENDRULE

RULE parameter
CLASS org.qbicc.graph.DelegatingBasicBlockBuilder
METHOD parameter
HELPER org.example.ea.helpers.EscapeAnalysisPoet
AT ENTRY
BIND
  name = linked("name");
  isIntra = org.qbicc.plugin.opt.ea.EscapeAnalysisIntraMethodBuilder.class.isInstance($this);
  aIntra : org.qbicc.plugin.opt.ea.EscapeAnalysisIntraMethodBuilder = (isIntra ? $this : null);
IF
  isIntra
  AND
  aIntra.connectionGraph.name.equals(name)
DO
  callParameter($1, $2, $3)
ENDRULE

RULE load
CLASS org.qbicc.graph.DelegatingBasicBlockBuilder
METHOD load
HELPER org.example.ea.helpers.EscapeAnalysisPoet
AT ENTRY
BIND
  name = linked("name");
  isIntra = org.qbicc.plugin.opt.ea.EscapeAnalysisIntraMethodBuilder.class.isInstance($this);
  aIntra : org.qbicc.plugin.opt.ea.EscapeAnalysisIntraMethodBuilder = (isIntra ? $this : null);
IF
  isIntra
  AND
  aIntra.connectionGraph.name.equals(name)
DO
  callLoad($1, $2)
ENDRULE

RULE constructorOf
CLASS org.qbicc.graph.DelegatingBasicBlockBuilder
METHOD constructorOf(Value, ConstructorElement, MethodDescriptor, FunctionType)
HELPER org.example.ea.helpers.EscapeAnalysisPoet
AT ENTRY
BIND
  name = linked("name");
  isIntra = org.qbicc.plugin.opt.ea.EscapeAnalysisIntraMethodBuilder.class.isInstance($this);
  aIntra : org.qbicc.plugin.opt.ea.EscapeAnalysisIntraMethodBuilder = (isIntra ? $this : null);
IF
  isIntra
  AND
  aIntra.connectionGraph.name.equals(name)
DO
  callConstructorOf($1, $2, $3, $4)
ENDRULE
